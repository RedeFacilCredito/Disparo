// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}


model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(USER) // <-- ADICIONE ESTA LINHA
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  audiences Audience[]
  campaigns Campaign[]

  @@map("users")
}

model Template {
  id                Int      @id @default(autoincrement())
  gupshupTemplateId String   @unique // NOVO CAMPO ADICIONADO
  name              String   @unique
  body              String
  variables         String[]
  status            String
  category          String?
  languageCode      String?
  templateType      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  campaigns         Campaign[]

  @@map("templates")
}

model Audience {
  id           Int      @id @default(autoincrement())
  name         String
  fileName     String?
  contactCount Int      @default(0)
  createdAt    DateTime @default(now())
  fields       String[] @default([])

  user         User     @relation(fields: [userId], references: [id])
  userId       Int

  contacts     Contact[]
  campaigns    Campaign[]

  @@map("audiences")
}

model Contact {
  id         Int      @id @default(autoincrement())
  phone      String
  data       Json?    // Adicione o '?' aqui para tornar o campo opcional

  audience   Audience @relation(fields: [audienceId], references: [id], onDelete: Cascade)
  audienceId Int
  messageLogs MessageLog[]

  @@map("contacts")
}

// backend/prisma/schema.prisma

model Campaign {
  id                Int       @id @default(autoincrement())
  name              String
  status            String
  scheduledAt       DateTime?
  messageInterval   String    @default("medium")
  variableMapping   Json?     // << NOVO CAMPO ADICIONADO
  senderType      String?  // Armazenará 'GUPSHUP' ou 'BAILEYS'
  senderInstanceId Int?    // Armazenará o ID da SenderInstance escolhida, se for Baileys
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user              User      @relation(fields: [userId], references: [id])
  userId            Int
  audience          Audience  @relation(fields: [audienceId], references: [id])
  audienceId        Int
  template          Template?  @relation(fields: [templateId], references: [id])
  templateId        Int?
  customMessageBody String?

  messageLogs MessageLog[]

  @@map("campaigns")
}

// ===== ADICIONE ESTE NOVO MODELO =====
model SenderInstance {
  id              Int      @id @default(autoincrement())
  instanceName    String   // Ex: "Disparo Vendas 01"
  whatsappNumber  String?  // O número do WhatsApp conectado (ex: 551199998888)
  type            String   // 'BAILEYS' ou 'GUPSHUP'
  status          String   // 'CONNECTED', 'DISCONNECTED', 'QR_PENDING'
  chatwootInboxId Int?     @unique // O ID da caixa de entrada correspondente no Chatwoot

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("sender_instances")
}

model MessageLog {
  id                Int      @id @default(autoincrement())

  campaign          Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId        Int

  contact           Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId         Int

  gupshupMessageId  String   @unique // O ID que a Gupshup retorna, para rastreamento
  status            String   // 'submitted', 'sent', 'delivered', 'read', 'failed'
  errorDetails      String?  // Para armazenar a mensagem de erro, se houver

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("message_logs")
}